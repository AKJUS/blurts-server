/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

import fs from "fs";
import YAML from "yaml";

const GLEAN_APP_DIR = "src/telemetry";
const GLEAN_MODULE_INDEX_PATH = `${GLEAN_APP_DIR}/generated/index.ts`;

function convertSnakeToCamelCase(string) {
  const underscore = "_";
  if (!string.includes(underscore)) {
    return string;
  }

  return string
    .split(underscore)
    .map((segment, segmentIndex) => {
      return segmentIndex === 0
        ? segment
        : `${segment.charAt(0).toUpperCase()}${segment.slice(1)}`;
    })
    .join("");
}

function getFileContent(modules) {
  return `/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

// AUTOGENERATED BY the \`build-glean-index\` script. DO NOT EDIT. DO NOT COMMIT.

${modules
  .map((module) => `import * as ${module} from "./${module}.ts";`)
  .join("\n")}

export {
${modules.map((module) => `\u0020\u0020${module},`).join("\n")}
}
`;
}

const metricsYaml = fs.readFileSync(`${GLEAN_APP_DIR}/metrics.yaml`, "utf8");
const { $schema, ...metrics } = YAML.parse(metricsYaml);
const modules = Object.keys(metrics).map(convertSnakeToCamelCase);

fs.writeFileSync(GLEAN_MODULE_INDEX_PATH, getFileContent(modules));
